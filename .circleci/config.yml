version: 2.1
orbs:
  slack: circleci/slack@5.1.1
  kubernetes: circleci/kubernetes@1.3.1
jobs:
  ensure_formatting:
    docker:
      - image: cimg/python:3.13
    working_directory: ~/repo
    steps:
      - checkout
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - run:
          name: install dependencies
          command: pip install black isort --user
      - run:
          name: confirm black version
          command: black --version
      - run:
          name: run isort check
          command: isort --profile black --check .
      - run:
          name: run black check
          command: black --check .
      - slack/notify:
          event: fail
          template: basic_fail_1
  linter:
    docker:
      - image: alpine/flake8
    working_directory: ~/repo
    steps:
      - checkout
      - run: apk update && apk upgrade && apk --no-cache add curl gettext bash
      - run:
          name: flake8
          command: flake8 --ignore=E,W ~/repo
      - slack/notify:
          event: fail
          template: basic_fail_1
  test:
    working_directory: ~/openbas
    docker:
      - image: cimg/python:3.13
    steps:
      - checkout
      - setup_remote_docker
      - run:
          working_directory: ~/
          name: Clone pyobas
          command: git clone -b release/current https://github.com/OpenBAS-Platform/client-python
      - run:
          working_directory: ~/openbas/crowdstrike
          name: Install poetry
          command: pip install poetry==2.1.3
      - run:
          working_directory: ~/openbas/crowdstrike
          name: Install dependencies for crowdstrike collector
          command: poetry install
      - run:
          working_directory: ~/openbas/crowdstrike
          name: Tests for crowdstrike collector
          command: poetry run python -m unittest
  build_docker_images:
    working_directory: ~/openbas
    docker:
      - image: cimg/base:stable-20.04
    environment:
      LATEST_SEMANTIC_VERSION: $(git tag --sort=-v:refname | grep -E '^v?[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
      IS_LATEST: $([ "$CIRCLE_TAG" = "$LATEST_SEMANTIC_VERSION" ] && echo "true" || echo "false")
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install environment
          command: |
            sudo apt-get update -qq
            sudo apt install curl gettext-base
            mkdir -p ~/openbas/images
      - run:
          working_directory: ~/openbas
          name: Replace pyobas requirement of stable version with latest release branch code
          # We safely expand the CIRCLE_BRANCH variable because the CircleCI filters already enforce a strict release/x.x.x pattern using regex
          command: |
            if [ "${CIRCLE_BRANCH}" = "main" ]; then
              find . -name pyproject.toml | xargs -I ___ sed "s|branch = 'release/current'|branch = '${CIRCLE_BRANCH}'|" -i ___;
            fi;
      - run:
          working_directory: ~/openbas/mitre-attack
          name: Build Docker image openbas/collector-mitre-attack
          command: |
            TAGS="-t openbas/collector-mitre-attack:${CIRCLE_SHA1}"
            $IS_LATEST && TAGS="$TAGS -t openbas/collector-mitre-attack:latest"
            docker build --progress=plain $TAGS .
            docker save -o ~/openbas/images/collector-mitre-attack openbas/collector-mitre-attack:${CIRCLE_SHA1}
      - run:
          working_directory: ~/openbas/microsoft-entra
          name: Build Docker image openbas/collector-microsoft-entra
          command: |
            TAGS="-t openbas/collector-microsoft-entra:${CIRCLE_SHA1}"
            $IS_LATEST && TAGS="$TAGS -t openbas/collector-microsoft-entra:latest"
            docker build --progress=plain $TAGS .
            docker save -o ~/openbas/images/collector-microsoft-entra openbas/collector-microsoft-entra:${CIRCLE_SHA1}
      - run:
          working_directory: ~/openbas/tanium-threat-response
          name: Build Docker image openbas/collector-tanium-threat-response
          command: |
            TAGS="-t openbas/collector-tanium-threat-response:${CIRCLE_SHA1}"
            $IS_LATEST && TAGS="$TAGS -t openbas/collector-tanium-threat-response:latest"
            docker build --progress=plain $TAGS .
            docker save -o ~/openbas/images/collector-tanium-threat-response openbas/collector-tanium-threat-response:${CIRCLE_SHA1}
      - run:
          working_directory: ~/openbas/microsoft-defender
          name: Build Docker image openbas/collector-microsoft-defender
          command: |
            TAGS="-t openbas/collector-microsoft-defender:${CIRCLE_SHA1}"
            $IS_LATEST && TAGS="$TAGS -t openbas/collector-microsoft-defender:latest"
            docker build --progress=plain $TAGS .
            docker save -o ~/openbas/images/collector-microsoft-defender openbas/collector-microsoft-defender:${CIRCLE_SHA1}
      - run:
          working_directory: ~/openbas/microsoft-sentinel
          name: Build Docker image openbas/collector-microsoft-sentinel
          command: |
            TAGS="-t openbas/collector-microsoft-sentinel:${CIRCLE_SHA1}"
            $IS_LATEST && TAGS="$TAGS -t openbas/collector-microsoft-sentinel:latest"
            docker build --progress=plain $TAGS .
            docker save -o ~/openbas/images/collector-microsoft-sentinel openbas/collector-microsoft-sentinel:${CIRCLE_SHA1}
      - run:
          working_directory: ~/openbas/atomic-red-team
          name: Build Docker image openbas/collector-atomic-red-team
          command: |
            TAGS="-t openbas/collector-atomic-red-team:${CIRCLE_SHA1}"
            $IS_LATEST && TAGS="$TAGS -t openbas/collector-atomic-red-team:latest"
            docker build --progress=plain $TAGS .
            docker save -o ~/openbas/images/collector-atomic-red-team openbas/collector-atomic-red-team:${CIRCLE_SHA1}
      - run:
          working_directory: ~/openbas/crowdstrike
          name: Build Docker image openbas/collector-crowdstrike
          command: |
            TAGS="-t openbas/collector-crowdstrike:${CIRCLE_SHA1}"
            $IS_LATEST && TAGS="$TAGS -t openbas/collector-crowdstrike:latest"
            docker build --progress=plain $TAGS .
            docker save -o ~/openbas/images/collector-crowdstrike openbas/collector-crowdstrike:${CIRCLE_SHA1}
      - persist_to_workspace:
          root: ~/openbas
          paths:
            - images
      - slack/notify:
          event: fail
          template: basic_fail_1
  publish_rolling_1:
    working_directory: ~/openbas
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - run:
          working_directory: ~/openbas/images
          name: Restore saved images
          command: |
            docker image load < collector-mitre-attack
            docker tag openbas/collector-mitre-attack:${CIRCLE_SHA1} openbas/collector-mitre-attack:rolling
            docker image load < collector-microsoft-entra
            docker tag openbas/collector-microsoft-entra:${CIRCLE_SHA1} openbas/collector-microsoft-entra:rolling
            docker image load < collector-tanium-threat-response
            docker tag openbas/collector-tanium-threat-response:${CIRCLE_SHA1} openbas/collector-tanium-threat-response:rolling
            docker image load < collector-microsoft-defender
            docker tag openbas/collector-microsoft-defender:${CIRCLE_SHA1} openbas/collector-microsoft-defender:rolling
            docker image load < collector-microsoft-sentinel
            docker tag openbas/collector-microsoft-sentinel:${CIRCLE_SHA1} openbas/collector-microsoft-sentinel:rolling
            docker image load < collector-atomic-red-team
            docker tag openbas/collector-atomic-red-team:${CIRCLE_SHA1} openbas/collector-atomic-red-team:rolling
            docker image load < collector-crowdstrike
            docker tag openbas/collector-crowdstrike:${CIRCLE_SHA1} openbas/collector-crowdstrike:rolling
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push openbas/collector-mitre-attack:rolling
            docker push openbas/collector-microsoft-entra:rolling
            docker push openbas/collector-tanium-threat-response:rolling
            docker push openbas/collector-microsoft-defender:rolling
            docker push openbas/collector-microsoft-sentinel:rolling
            docker push openbas/collector-atomic-red-team:rolling
            docker push openbas/collector-crowdstrike:rolling
      - slack/notify:
          event: fail
          template: basic_fail_1
  publish_prerelease_1:
    working_directory: ~/openbas
    docker:
      - image: cimg/base:stable-20.04
    steps:
      - attach_workspace:
          at: .
      - setup_remote_docker
      - run:
          working_directory: ~/openbas/images
          name: Restore saved images
          command: |
            docker image load < collector-mitre-attack
            docker tag openbas/collector-mitre-attack:${CIRCLE_SHA1} openbas/collector-mitre-attack:prerelease
            docker image load < collector-microsoft-entra
            docker tag openbas/collector-microsoft-entra:${CIRCLE_SHA1} openbas/collector-microsoft-entra:prerelease
            docker image load < collector-tanium-threat-response
            docker tag openbas/collector-tanium-threat-response:${CIRCLE_SHA1} openbas/collector-tanium-threat-response:prerelease
            docker image load < collector-microsoft-defender
            docker tag openbas/collector-microsoft-defender:${CIRCLE_SHA1} openbas/collector-microsoft-defender:prerelease
            docker image load < collector-microsoft-sentinel
            docker tag openbas/collector-microsoft-sentinel:${CIRCLE_SHA1} openbas/collector-microsoft-sentinel:prerelease
            docker image load < collector-atomic-red-team
            docker tag openbas/collector-atomic-red-team:${CIRCLE_SHA1} openbas/collector-atomic-red-team:prerelease
            docker image load < collector-crowdstrike
            docker tag openbas/collector-crowdstrike:${CIRCLE_SHA1} openbas/collector-crowdstrike:prerelease
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push openbas/collector-mitre-attack:prerelease
            docker push openbas/collector-microsoft-entra:prerelease
            docker push openbas/collector-tanium-threat-response:prerelease
            docker push openbas/collector-microsoft-defender:prerelease
            docker push openbas/collector-microsoft-sentinel:prerelease
            docker push openbas/collector-atomic-red-team:prerelease
            docker push openbas/collector-crowdstrike:prerelease
      - slack/notify:
          event: fail
          template: basic_fail_1
  deploy_testing:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run: kubectl --server=https://api.staging.eu-west.filigran.io --token=$K8S_TOKEN -n customer-testing-obas rollout restart deployment -l app=collector
  deploy_prerelease:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run: kubectl --server=https://api.staging.eu-west.filigran.io --token=$K8S_TOKEN_PRE_RELEASE -n customer-prerelease-obas rollout restart deployment -l app=collector
  notify_rolling:
    docker:
      - image: "cimg/base:stable"
    steps:
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - slack/notify:
          event: pass
          template: basic_success_1
  notify:
    docker:
      - image: "cimg/base:stable"
    steps:
      - run: sudo apt-get update -qq && sudo apt install curl gettext-base
      - slack/notify:
          event: pass
          template: basic_success_1
workflows:
  version: 2
  openbas:
    jobs:
      - ensure_formatting
      - linter
      - test
      - build_docker_images:
          requires:
            - ensure_formatting
            - linter
            - test
      - publish_rolling_1:
          requires:
            - build_docker_images
          filters:
            branches:
              only:
                - main
      - publish_prerelease_1:
          requires:
            - build_docker_images
          filters:
            branches:
              only:
                - release/current
      - deploy_testing:
          requires:
            - publish_rolling_1
      - deploy_prerelease:
          requires:
            - publish_prerelease_1
      - notify_rolling:
          requires:
            - deploy_testing
            - deploy_prerelease
      - notify:
          requires:
            - build_docker_images
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)+(\.[0-9]+)*/
            branches:
              ignore: /.*/
